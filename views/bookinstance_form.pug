extends layout

block content 
    h1=title

    form(method='POST')
        div.form-group
            label(for='book') Book: 
            select#book.form-control(name='book', required)
                option(value='') --Please select a book--
                for book in book_list
                    if selected_book==book._id.toString()
                        option(value=book._id, selected) #{book.title}
                    else 
                        option(value=book._id) #{book.title}
        
        div.form-group
            label(for='imprint') Imprint:
            input#imprint.form-control(type='text', placeholder='Publisher and date information', name="imprint" required, value=(undefined===bookinstance ? '' : bookinstance.imprint))
        
        div.form-group
            label(for='due_back') Date when book available: 
            input#due_back.form-control(type='date', name="due_back", value=(undefined===bookinstance ? '' : bookinstance.due_back_yyyy_mm_dd) )

        div.form-group
            label(for='status') Status:
            select#status.form-control(name='status' required)
                option(value='') --Please select a status--
                each val in status_list
                    if !bookinstance || bookinstance.status!=val
                        option(value=val)= val
                    else
                        option(value=val, selected)= val
        button.btn.btn-primary(type='submit') Submit

        if errors
            ul
                for error in errors
                    li!= error.msg

        
    


//- warum ist diese Zeile so aufgebaut:
//- option(value=val)= val

//- und nicht: option(value=val) #{val}


//- ‚úÖ Variante 1:
//- option(value=val)= val
//- = bedeutet: Der Inhalt wird direkt als Text ausgegeben.
//- Das ist die empfohlene Schreibweise, wenn du eine Variable ohne zus√§tzliche Formatierung ausgeben willst.
//- Beispiel:
//- val = "Available"
//- ergibt:

//- <option value="Available">Available</option>

//- ‚ö†Ô∏è Variante 2:
//- option(value=val) #{val}
//- #{val} ist eine sogenannte String Interpolation, die eigentlich f√ºr Inline-Ausgaben innerhalb von Strings gedacht ist.
//- Das funktioniert zwar auch hier, ist aber unn√∂tig umst√§ndlich ‚Äì du √∂ffnest ein Tag und interpolierst dann nochmal den Text.
//- Beispiel:
//- p Hello #{name}!
//- ergibt:

//- <p>Hello Max!</p>


//- üìå Warum also besser = val?
//- K√ºrzer und semantisch klarer: ‚ÄûGib den Wert val direkt aus.‚Äú
//- Wird von der Pug-Community als ‚Äûcleaner‚Äú Stil angesehen.
//- F√ºhrt zu weniger Verwirrung, besonders bei geschachteltem HTML.


//- üí° Merksatz:
//- Nutze = val f√ºr kompletten Textinhalt eines Tags,
//- und #{} f√ºr Inline-Ausdr√ºcke innerhalb von Strings oder Text.



//- The date value has to be set in the format YYYY-MM-DD because this is expected by <input> elements with type="date", however the date is not stored in this format so we have to convert it before setting the value in the control. The due_back_yyyy_mm_dd() method is added to the BookInstance model in the next section.